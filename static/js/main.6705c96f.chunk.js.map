{"version":3,"sources":["components/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","useState","input","setInput","useEffect","style","maxWidth","Row","Col","Form","Control","as","minHeight","value","onChange","e","newText","target","handleChange","children","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAgCeA,MA5Bf,WAAkB,IAAD,EACYC,mBAAS,IADrB,mBACNC,EADM,KACAC,EADA,KAYb,OAJAC,qBAAU,WACND,EAAS,iCACV,IAGC,qBACIE,MAAO,CAACC,SAAS,QADrB,SAGQ,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAKC,QAAN,CAAcC,GAAG,WAAWN,MAAO,CAACO,UAAU,SAAUC,MAAOX,EAAOY,SAAU,SAACC,GAAD,OAfpG,SAAsBA,GAClB,IAAMC,EAAUD,EAAEE,OAAOJ,MACzBV,EAASa,GAa8FE,CAAaH,QAExG,cAACP,EAAA,EAAD,UACA,cAAC,IAAD,CAAeW,SAAUjB,YCb9BkB,MARf,WACE,OAEM,cAAC,EAAD,KCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6705c96f.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\"\r\nimport { Col, Row, Form } from \"react-bootstrap\"\r\nimport ReactMarkdown from \"react-markdown\"\r\n\r\nfunction Editor(){\r\n    const [input,setInput] = useState('')\r\n\r\n    function handleChange(e){\r\n        const newText = e.target.value\r\n        setInput(newText)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setInput(\"# Insert your markdown here\")\r\n    }, [])\r\n\r\n    return(\r\n        <div\r\n            style={{maxWidth:\"99vw\"}}\r\n        >\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Control as=\"textarea\" style={{minHeight:\"100vh\"}} value={input} onChange={(e) => handleChange(e)} />\r\n                    </Col>\r\n                    <Col>\r\n                    <ReactMarkdown children={input}/>\r\n                    </Col>\r\n                </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport Editor from './components/Editor';\r\n\r\nfunction App() {\r\n  return (\r\n\r\n        <Editor></Editor>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}